using System;
using System.Collections.Generic;

namespace todo2
{
    enum Priority
    {
        Low = 1,
        Medium = 2,
        High = 3
    }

    class TaskItem
    {
        public string Description;
        public bool IsCompleted = false;
        public Priority PriorityLevel;

        public void MarkAsCompleted()
        {
            IsCompleted = true;
        }
    }

    class Program
    {
        static List<TaskItem> tasks = new List<TaskItem>();

        static void Main(string[] args)
        {
            while (true)
            {
                Console.WriteLine("\n--- To-Do List ---");
                Console.WriteLine("1. Add Task");
                Console.WriteLine("2. Mark Task as Completed");
                Console.WriteLine("3. Show All Tasks");
                Console.WriteLine("4. Show Pending Tasks");
                Console.WriteLine("5. Exit");

                Console.Write("Enter Choice: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        AddTask();
                        break;
                    case "2":
                        MarkAsCompleted();
                        break;
                    case "3":
                        ShowAllTasks();
                        break;
                    case "4":
                        ShowPendingTasks();
                        break;
                    case "5":
                        Console.WriteLine("Exited");
                        return;
                    default:
                        Console.WriteLine("Invalid Choice.");
                        break;
                }
            }
        }

        static void AddTask()
        {
            Console.Write("Enter Task: ");
            string myDesc = Console.ReadLine();

            // Check for duplicate
            bool same = false;
            foreach (var task in tasks)
            {
                if (task.Description.Equals(myDesc, StringComparison.OrdinalIgnoreCase))
                {
                    same = true;
                    break;
                }
            }

            if (same)
            {
                Console.WriteLine("Task already exists!");
                return;
            }

            Console.Write("Enter priority (Low/Medium/High): ");
            string p = Console.ReadLine();

            Priority myPriority;
            if (p.Equals("Low", StringComparison.OrdinalIgnoreCase))
                myPriority = Priority.Low;
            else if (p.Equals("Medium", StringComparison.OrdinalIgnoreCase))
                myPriority = Priority.Medium;
            else if (p.Equals("High", StringComparison.OrdinalIgnoreCase))
                myPriority = Priority.High;
            else
            {
                Console.WriteLine("Invalid Priority!");
                return;
            }

            TaskItem newTask = new TaskItem();
            newTask.Description = myDesc;
            newTask.PriorityLevel = myPriority;

            tasks.Add(newTask);
            Console.WriteLine("Task added!");
        }

        static void MarkAsCompleted()
        {
            Console.Write("Enter task description to mark as completed: ");
            string myDisc = Console.ReadLine();

            bool found = false;
            foreach (var task in tasks)
            {
                if (task.Description.Equals(myDisc, StringComparison.OrdinalIgnoreCase))
                {
                    task.MarkAsCompleted();
                    found = true;
                    Console.WriteLine("Task marked as completed!");
                    break;
                }
            }
            if (!found) Console.WriteLine("Task not found!");
        }

        static void ShowAllTasks()
        {
            if (tasks.Count == 0)
            {
                Console.WriteLine("No Tasks available.");
                return;
            }

            // Bubble sort (High to Low)
            for (int i = 0; i < tasks.Count - 1; i++)
            {
                for (int j = 0; j < tasks.Count - i - 1; j++)
                {
                    if (tasks[j].PriorityLevel < tasks[j + 1].PriorityLevel)
                    {
                        var temp = tasks[j];
                        tasks[j] = tasks[j + 1];
                        tasks[j + 1] = temp;
                    }
                }
            }

            Console.WriteLine("\nAll Tasks (high to low):");
            foreach (var t in tasks)
            {
                string status = t.IsCompleted ? "Completed" : "Pending";
                Console.WriteLine($"{t.PriorityLevel} -- {t.Description} - {status}");
            }
        }

        static void ShowPendingTasks()
        {
            bool anyPending = false;
            Console.WriteLine("\nPending Tasks:");
            foreach (var task in tasks)
            {
                if (!task.IsCompleted)
                {
                    anyPending = true;
                    Console.WriteLine($"[{task.PriorityLevel}] {task.Description}");
                }
            }
            if (!anyPending) Console.WriteLine("No pending tasks!");
        }
    }
}
